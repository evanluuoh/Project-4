#include "DiskMultiMap.h"
#include "MultiMapTuple.h"
#include <functional>
#include <list>

using namespace std;


bool DiskMultiMap::stringsMatch(Node n, const std::string& key, const std::string& value, const std::string& context)
{
	if (strcmp(n.key, key.c_str()) == 0 && strcmp(n.value, value.c_str()) == 0 && strcmp(n.context, context.c_str()) == 0)
		return true;
	return false;
}

BinaryFile::Offset DiskMultiMap::findBucketOffset(const std::string& key)
{
	hash<string> hashFunction;
	size_t hashResult = hashFunction(key);  //returns a size_t value, now we have to convert into an offset

	Header header;
	bf.read(header, 0);
	hashResult = hashResult % header.numBuckets;  //hashResult is now a bucket NUMBER, to convert into offset we match the bucket number with its index

	BinaryFile::Offset BucketOffset = sizeof(Header) + (hashResult * sizeof(Bucket));
	return BucketOffset;
}


DiskMultiMap::Iterator::Iterator()
{
	m_valid = false;
}

DiskMultiMap::Iterator::Iterator(std::list<MultiMapTuple> tupleList)
{
	if (tupleList.empty())
		m_valid = false;
	else
		m_valid = true;
	m_list = tupleList;
	m_value = tupleList.front();
}

bool DiskMultiMap::Iterator::isValid() const
{
	return m_valid;
}

DiskMultiMap::Iterator& DiskMultiMap::Iterator::operator++()
{
	if (isValid())
	{
		m_list.pop_front();
		if (m_list.empty())
		{
			m_valid = false;
		}
		else
			m_value = m_list.front();
		return *this;
	}
}

MultiMapTuple DiskMultiMap::Iterator::operator*()
{
	MultiMapTuple result;
	if (!isValid())
	{
		result.key = "";
		result.value = "";
		result.context = "";
	}
	else
		result = m_value;
	return result;
}


DiskMultiMap::DiskMultiMap()
{}

DiskMultiMap::~DiskMultiMap()
{
	bf.close();
}

bool DiskMultiMap::createNew(const std::string& filename, unsigned int numBuckets)
{
	bf.close();

	bool success = bf.createNew(filename);
	if (!success)
		return false;
	m_filename = filename;

	Header header;
	header.numBuckets = numBuckets;
	header.spaceHead = NULL_OFFSET;
	success = bf.write(header, 0);  //store header first
	if (!success)
		return false;

	int headerSize = sizeof(header);  //then store the buckets (8)
	int bucketSize = sizeof(Bucket);  //keep track of the size of a Bucket (4)
	for (int i = 0; i < numBuckets; i++)
	{
		Bucket b;
		b.head = NULL_OFFSET;
		success = bf.write(b, headerSize + (i * bucketSize));
		if (!success)
			return false;
	}
	return true;
}

bool DiskMultiMap::openExisting(const std::string& filename)
{
	bf.close();
	return bf.openExisting(filename);
}

void DiskMultiMap::close()
{
	bf.close();
}

bool DiskMultiMap::insert(const std::string& key, const std::string& value, const std::string& context)
{
	if (key.size() > MAX_STRING_SIZE || value.size() > MAX_STRING_SIZE || context.size() > MAX_STRING_SIZE)
		return false;

	Bucket b;  //find the bucket that will hold key
	BinaryFile::Offset BucketOffset = findBucketOffset(key);
	bf.read(b, BucketOffset);  //get the bucket at BucketOffset

	Node newNode;
	strcpy_s(newNode.key, key.c_str()); //initialize newNode
	strcpy_s(newNode.value, value.c_str());
	strcpy_s(newNode.context, context.c_str());
	newNode.next = b.head;  //set newNode's next to the current head

	Header header;
	bf.read(header, 0);
	if (header.spaceHead == 0)
	{
		b.head = bf.fileLength();  //the new head offset should point to newNode's current offset
		bf.write(newNode, bf.fileLength());  //write the newNode into the list at the last open offset
		bf.write(b.head, BucketOffset);  //update the head variable to point to the new offset in the list
		return true;
	}
	else
	{
		Node filledNode;
		bf.read(filledNode, header.spaceHead);  //sets filledNode equal to the existing node at spaceHead
		bf.write(newNode, header.spaceHead);  //overwrite the newNode into the first available open space
		b.head = header.spaceHead;  //set head equal to newNode's offset
		header.spaceHead = filledNode.next;  //set spaceHead equal to the next "deleted" node
		bf.write(b.head, BucketOffset);
		bf.write(header, 0);
		return true;
	}
}

DiskMultiMap::Iterator DiskMultiMap::search(const std::string& key)
{
	Bucket b;
	BinaryFile::Offset BucketOffset = findBucketOffset(key);  //find the bucket b that is returned by the hash function
	bf.read(b, BucketOffset);  //b now refers to the bucket that contains all nodes that have key string key

	list<MultiMapTuple> tupleList;
	Node currNode;
	for (BinaryFile::Offset i = b.head; i != 0; i = currNode.next)  //i starts at the head of b, and goes to the next node until it hits the end
	{
		bf.read(currNode, i);  //update currNode every time you loop through to point to the Node at offset i
		if (currNode.key == key)
		{
			MultiMapTuple currTuple;
			currTuple.key = currNode.key;
			currTuple.value = currNode.value;
			currTuple.context = currNode.context;
			tupleList.push_back(currTuple);
		}
	}

	Iterator it;
	if (tupleList.empty())
		it = Iterator();
	else
	{
		it = Iterator(tupleList);
	}
	return it;
}

int DiskMultiMap::erase(const std::string& key, const std::string& value, const std::string& context)
{
	Bucket b;
	BinaryFile::Offset BucketOffset = findBucketOffset(key);
	bf.read(b, BucketOffset);  //get the bucket at BucketOffset

	Header h;
	bf.read(h, 0);
	bool removed = false;
	if (b.head == 0)
		return false;
	Node currNode;
	BinaryFile::Offset currOffset; //keeps track of currNode's offset
	bf.read(currNode, b.head); //sets currNode equal to the head node
	currOffset = b.head;
	if (stringsMatch(currNode, key, value, context))  //if head's value is equal to data, remove
	{
		h.spaceHead = b.head;  //node at head is now the head of the deleted nodes
		b.head = currNode.next;  //head is now the node after currNode
		bf.write(b, BucketOffset);
		bf.write(h, 0);
		removed = true;
		bf.read(currNode, currNode.next);
	}


	bool incrementCurr = false;
	for (BinaryFile::Offset i = b.head; i != 0; i = currNode.next)
	{
		Node nextNode;
		bf.read(nextNode, currNode.next);
		if (incrementCurr)
		{
			bf.read(currNode, i);
			currOffset = i;
		}

		if (currNode.next != 0 && stringsMatch(nextNode, key, value, context))
		{
			BinaryFile::Offset temp = h.spaceHead;
			BinaryFile::Offset temp2 = currNode.next;
			h.spaceHead = currNode.next;  //spaceHead is now the offset of nextNode
			currNode.next = nextNode.next;  //set the node after currNode to be the node after nextNode
			nextNode.next = temp;  //set nextNode's next offset to the next "deleted" node
			bf.write(nextNode, temp2);  //update the value of the current nextNode
			bf.write(currNode, currOffset);
			bf.write(h.spaceHead, 4);  //update the value of spaceHead
			removed = true;
			incrementCurr = false;
		}
		else
			incrementCurr = true;
	}
	return removed;
}



int main()
{
	DiskMultiMap x;
	x.createNew("myhashtable.dat", 100); // empty, with 100 buckets
	x.insert("hmm.exe", "pfft.exe", "m52902");
	x.insert("hmm.exe", "pfft.exe", "m52902");
	x.insert("hmm.exe", "pfft.exe", "m10001");
	x.insert("blah.exe", "bletch.exe", "m0003");
	x.erase("hmm.exe", "pfft.exe", "m52902");
	DiskMultiMap::Iterator it = x.search("hmm.exe");
	if (it.isValid())
	{
		cout << "I found at least 1 item with a key of hmm.exe\n";
		do
		{
			MultiMapTuple m = *it; // get the association
			cout << "The key is: " << m.key << endl;
			cout << "The value is: " << m.value << endl;
			cout << "The context is: " << m.context << endl;
			cout << endl;
			++it; // advance iterator to the next matching item
		} while (it.isValid());
	}
	cout << "khk" << endl;
}
